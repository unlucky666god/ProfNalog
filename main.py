from flask import *
import json
import os
import requests
from datetime import datetime
import telebot

app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'dev-secret-key-12345-!@#$%')

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞) ===
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8461294572:AAHIgI2Sm5zHHXotwVTjoMkkbOJGEn-cAj0')  # –ª—É—á—à–µ —á–µ—Ä–µ–∑ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHAT_IDS = os.getenv('TELEGRAM_CHAT_IDS', '839519148,5362530571,110508270').split(',')  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "123456789,987654321"

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, threaded=False)

# –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É
DATA_FILE = 'submissions.json'

RECAPTCHA_SECRET_KEY = '6LfNOdkrAAAAALe1bxVSwC3yLSHwbTpfgp5ifByt'

def verify_recaptcha(response_token):
    if not response_token:
        return False
    payload = {
        'secret': RECAPTCHA_SECRET_KEY,
        'response': response_token
    }
    r = requests.post('https://www.google.com/recaptcha/api/siteverify', data=payload)
    result = r.json()
    return result.get('success', False)

def save_to_json(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª (–¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –º–∞—Å—Å–∏–≤)"""
    submissions = []

    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                submissions = json.load(f)
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                if not isinstance(submissions, list):
                    submissions = []
        except (json.JSONDecodeError, IOError) as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–π–ª {DATA_FILE} –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
            submissions = []

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    submissions.append(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ (—Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(submissions, f, ensure_ascii=False, indent=2)
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {DATA_FILE}: {e}")
        raise

def send_telegram_notification(data):
    if not TELEGRAM_BOT_TOKEN or not CHAT_IDS:
        return

    text = f"""
üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ!

–ò–º—è: {data['name']}
–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
–°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message', '‚Äî')}

–í—Ä–µ–º—è: {data['timestamp']}
    """.strip()

    for chat_id in CHAT_IDS:
        chat_id = chat_id.strip()
        if chat_id:
            try:
                bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —á–µ—Ä–µ–∑ telebot: {e}")

@app.route('/submit', methods=['POST'])
def submit_form():
    name = request.form.get('name', '').strip()
    phone = request.form.get('phone', '').strip()
    message = request.form.get('message', '').strip()
    consent = request.form.get('consent')
    recaptcha_response = request.form.get('g-recaptcha-response')

    if not verify_recaptcha(recaptcha_response):
        flash("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç.", "error")
        return redirect(url_for('index'))

    if not name or not phone or not consent:
        flash("–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.", "error")
        return redirect(url_for('index'))

    submission = {
        'timestamp': datetime.now().isoformat(),
        'name': name,
        'phone': phone,
        'message': message
    }

    try:
        save_to_json(submission)
        send_telegram_notification(submission)
        flash("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", "success")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        flash("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "error")

    return redirect(url_for('index'))


#Main page
@app.route('/')
def index():
    return render_template("index.html")

@app.route('/nalogovaya-proverka')
def provNalog():
    return render_template("nalogovaya-proverka.html")

@app.route('/donachisleniya-nalogov')
def donachisleniyaNalogov():
    return render_template("donachisleniya-nalogov.html")

@app.route('/blokirovka-schetov')
def blokirovkaSchetov():
    return render_template("blokirovka-schetov.html")

@app.route('/nalogovaya-otvetstvennost')
def nalogovayaOtvetstvennost():
    return render_template("nalogovaya-otvetstvennost.html")

@app.route('/blog')
def blog():
    return render_template("blog.html")

@app.route('/faq')
def faq():
    return render_template("faq.html")

@app.route('/cases')
def cases():
    return render_template("cases.html")

@app.route('/privacy')
def privacy():
    return render_template("privacy.html")

@app.route('/sitemap.xml')
def sitemap():
    return render_template("sitemap.xml")

@app.route('/robots.txt')
def robotstxt():
    return render_template("robots.txt")

if __name__ == '__main__':
    app.run(debug=False)
